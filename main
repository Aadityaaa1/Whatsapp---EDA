from collections import Counter
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from whatstk import WhatsAppChat
from whatstk import FigureBuilder
from plotly.offline import plot
import pandas as pd


filepath = "insert file path"
chat = WhatsAppChat.from_source(filepath=filepath)

init_date = chat.df.date.min()
end_date = chat.df.date.max()
print(f"First date is: {init_date}\nLast date is: {end_date}")

# Number of messages sent
message_counts = chat.df.groupby('username').agg(num_messages=('message', 'count'))
print(message_counts)

# Words to exclude from the top 10
exclude_words = ['am','-','Rao:','omitted>', '31/07/2023,','<Media', '03/08/2023,','iren:', 'Aaditya',"Rao",'and', 'a', 'Iren', 'you','iren', 'I', 'to','the', 'i']  # Add the words you want to exclude from the top 10

# Top 10 most used words (excluding specific words)
all_messages = ' '.join(chat.df['message'].dropna().astype(str))
words_counter = Counter(all_messages.split())

# Remove excluded words
for word in exclude_words:
    del words_counter[word]

top_10_words = dict(words_counter.most_common(10))
print("Top 10 most used words :", top_10_words)

# Plotting WordCloud for the top 10 words
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(top_10_words)
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Top 10 Most Used Words ')
plt.show()

# Additional code for user interventions count
fb = FigureBuilder(chat=chat)
fig = fb.user_interventions_count_linechart(cumulative=True, title='User Text Count (cumulative)')
plot(fig)

# Number of characters sent
fig1 = fb.user_interventions_count_linechart(cumulative=True, msg_length=True, title='Count of sent characters (cumulative)')
plot(fig1)

fig = fb.user_msg_length_boxplot()
plot(fig)

labels = message_counts.index
sizes = message_counts['num_messages']
colors = plt.cm.Paired(range(len(labels)))  # You can choose a different color map if needed

plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title('Distribution of Texts Sent by Each Person')
plt.show()

# Extracting day of the week, month, and hour information
chat.df['day_of_week'] = chat.df['date'].dt.day_name()
chat.df['month'] = chat.df['date'].dt.month_name()

# Bar chart for messages sent on different days of the week
plt.figure(figsize=(12, 5))
custom_day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
day_of_week_counts = chat.df['day_of_week'].value_counts().sort_index()
sorted_data1 = day_of_week_counts[custom_day_order]
sorted_data1.plot(kind='bar', color='red')
plt.title('Messages Sent on Different Days of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Number of Messages')
plt.show()



# Extract month from the timestamp
chat.df['month'] = chat.df['date'].dt.month_name()

# Create a Categorical data type with custom order
custom_month_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]
custom_month_cat = pd.Categorical(chat.df['month'], categories=custom_month_order, ordered=True)

# Calculate the total number of messages sent in each month
month_counts = custom_month_cat.value_counts().sort_index(ascending=False)

# Create a bar graph
plt.figure(figsize=(10, 6))
month_counts.plot(kind='bar', color='pink')
plt.title('Total Messages Sent in Each Month')
plt.xlabel('Month')
plt.ylabel('Number of Messages')
plt.show()


# Calculate the time difference between consecutive messages for each participant
chat.df['time_diff'] = chat.df.groupby('username')['date'].diff()

# Extract the response time in seconds
chat.df['response_time_seconds'] = chat.df['time_diff'].dt.total_seconds()

# Calculate the average response time for each participant
average_response_time = chat.df.groupby('username')['response_time_seconds'].mean()

# Create a bar graph
plt.figure(figsize=(10, 6))
average_response_time.sort_values().plot(kind='bar', color='maroon')
plt.title('Average Response Time for Each Participant')
plt.xlabel('Participant')
plt.ylabel('Average Response Time (seconds)')
plt.xticks(rotation=45, ha='right')
plt.show()

# Calculate the time difference between consecutive messages for each participant
chat.df['time_diff'] = chat.df.groupby('username')['date'].diff()

# Set a threshold for inactivity (e.g., 1 hour)
inactivity_threshold = pd.Timedelta(hours=4)

# Identify conversations started by each participant
chat.df['conversation_started'] = (chat.df['time_diff'] > inactivity_threshold) | chat.df['time_diff'].isnull()

# Count the number of conversations started by each participant
conversations_started_count = chat.df.groupby('username')['conversation_started'].sum()

# Create a bar graph
plt.figure(figsize=(10, 6))
conversations_started_count.sort_values().plot(kind='bar', color='orange')
plt.title('Number of Conversations Started by Each Participant')
plt.xlabel('Participant')
plt.ylabel('Number of Conversations Started')
plt.xticks(rotation=45, ha='right')
plt.show()
